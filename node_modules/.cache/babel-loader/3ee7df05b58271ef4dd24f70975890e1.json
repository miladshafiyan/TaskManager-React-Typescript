{"ast":null,"code":"import _objectSpread from \"E:\\\\\\u0628\\u0631\\u0646\\u0627\\u0645\\u0647 \\u0646\\u0648\\u06CC\\u0633\\u06CC\\\\Task Manager\\\\Front\\\\TaskManager-React-Typescript\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"E:\\\\\\u0628\\u0631\\u0646\\u0627\\u0645\\u0647 \\u0646\\u0648\\u06CC\\u0633\\u06CC\\\\Task Manager\\\\Front\\\\TaskManager-React-Typescript\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { combineReducers } from 'redux';\nimport { FETCH_TASKS_START, FETCH_TASKS_SUCCESS, FETCH_TASKS_FAIL, ADD_TASK_SUCCESS, UPDATE_TASK_TEXT_SUCCESS, UPDATE_TASK_STATUS_SUCCESS } from '../actions/types';\nvar initialTasksState = {\n  tasks: [],\n  loading: false,\n  error: null\n};\n\nfunction tasksReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialTasksState.tasks;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_TASKS_SUCCESS:\n      return action.payload;\n\n    case ADD_TASK_SUCCESS:\n      return [].concat(_toConsumableArray(state), [action.payload]);\n\n    case UPDATE_TASK_TEXT_SUCCESS:\n      return state.map(function (task) {\n        return task.id === action.payload.id ? _objectSpread({}, task, {\n          text: action.payload.text\n        }) : task;\n      });\n\n    case UPDATE_TASK_STATUS_SUCCESS:\n      return state.map(function (task) {\n        return task.id === action.payload.id ? _objectSpread({}, task, {\n          status: action.payload.status\n        }) : task;\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction loadingReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialTasksState.loading;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_TASKS_START:\n      return true;\n\n    case FETCH_TASKS_SUCCESS:\n    case ADD_TASK_SUCCESS:\n    case UPDATE_TASK_TEXT_SUCCESS:\n    case UPDATE_TASK_STATUS_SUCCESS:\n    case FETCH_TASKS_FAIL:\n      return false;\n\n    default:\n      return state;\n  }\n}\n\nfunction errorReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialTasksState.error;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_TASKS_SUCCESS:\n    case ADD_TASK_SUCCESS:\n    case UPDATE_TASK_TEXT_SUCCESS:\n    case UPDATE_TASK_STATUS_SUCCESS:\n      return null;\n\n    case FETCH_TASKS_FAIL:\n      return action.payload;\n\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  tasks: tasksReducer,\n  loading: loadingReducer,\n  error: errorReducer\n});","map":{"version":3,"sources":["E:\\برنامه نویسی\\Task Manager\\Front\\TaskManager-React-Typescript\\src\\redux\\reducers\\tasks.ts"],"names":["combineReducers","FETCH_TASKS_START","FETCH_TASKS_SUCCESS","FETCH_TASKS_FAIL","ADD_TASK_SUCCESS","UPDATE_TASK_TEXT_SUCCESS","UPDATE_TASK_STATUS_SUCCESS","initialTasksState","tasks","loading","error","tasksReducer","state","action","type","payload","map","task","id","text","status","loadingReducer","errorReducer"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAGEC,iBAHF,EAIEC,mBAJF,EAKEC,gBALF,EAMEC,gBANF,EAOEC,wBAPF,EAQEC,0BARF,QASO,kBATP;AAWA,IAAMC,iBAA8B,GAAG;AACrCC,EAAAA,KAAK,EAAE,EAD8B;AAErCC,EAAAA,OAAO,EAAE,KAF4B;AAGrCC,EAAAA,KAAK,EAAE;AAH8B,CAAvC;;AAMA,SAASC,YAAT,GAAiF;AAAA,MAA3DC,KAA2D,uEAAnDL,iBAAiB,CAACC,KAAiC;AAAA,MAA1BK,MAA0B;;AAC/E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,mBAAL;AACE,aAAOW,MAAM,CAACE,OAAd;;AAEF,SAAKX,gBAAL;AACE,0CAAWQ,KAAX,IAAkBC,MAAM,CAACE,OAAzB;;AAEF,SAAKV,wBAAL;AACE,aAAOO,KAAK,CAACI,GAAN,CAAU,UAAAC,IAAI;AAAA,eACnBA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACE,OAAP,CAAeG,EAA3B,qBAAqCD,IAArC;AAA2CE,UAAAA,IAAI,EAAEN,MAAM,CAACE,OAAP,CAAeI;AAAhE,aAAyEF,IADtD;AAAA,OAAd,CAAP;;AAGF,SAAKX,0BAAL;AACE,aAAOM,KAAK,CAACI,GAAN,CAAU,UAAAC,IAAI;AAAA,eACnBA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACE,OAAP,CAAeG,EAA3B,qBAAqCD,IAArC;AAA2CG,UAAAA,MAAM,EAAEP,MAAM,CAACE,OAAP,CAAeK;AAAlE,aAA6EH,IAD1D;AAAA,OAAd,CAAP;;AAIF;AACE,aAAOL,KAAP;AAjBJ;AAmBD;;AAED,SAASS,cAAT,GAAqF;AAAA,MAA7DT,KAA6D,uEAArDL,iBAAiB,CAACE,OAAmC;AAAA,MAA1BI,MAA0B;;AACnF,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,iBAAL;AACE,aAAO,IAAP;;AAEF,SAAKC,mBAAL;AACA,SAAKE,gBAAL;AACA,SAAKC,wBAAL;AACA,SAAKC,0BAAL;AACA,SAAKH,gBAAL;AACE,aAAO,KAAP;;AAEF;AACE,aAAOS,KAAP;AAZJ;AAcD;;AAED,SAASU,YAAT,GAAiF;AAAA,MAA3DV,KAA2D,uEAAnDL,iBAAiB,CAACG,KAAiC;AAAA,MAA1BG,MAA0B;;AAC/E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,mBAAL;AACA,SAAKE,gBAAL;AACA,SAAKC,wBAAL;AACA,SAAKC,0BAAL;AACE,aAAO,IAAP;;AAEF,SAAKH,gBAAL;AACE,aAAOU,MAAM,CAACE,OAAd;;AAEF;AACE,aAAOH,KAAP;AAXJ;AAaD;;AAED,eAAeZ,eAAe,CAAC;AAC7BQ,EAAAA,KAAK,EAAEG,YADsB;AAE7BF,EAAAA,OAAO,EAAEY,cAFoB;AAG7BX,EAAAA,KAAK,EAAEY;AAHsB,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\nimport {\n  ITasksState,\n  TasksActionTypes,\n  FETCH_TASKS_START,\n  FETCH_TASKS_SUCCESS,\n  FETCH_TASKS_FAIL,\n  ADD_TASK_SUCCESS,\n  UPDATE_TASK_TEXT_SUCCESS,\n  UPDATE_TASK_STATUS_SUCCESS,\n} from '../actions/types';\n\nconst initialTasksState: ITasksState = {\n  tasks: [],\n  loading: false,\n  error: null,\n};\n\nfunction tasksReducer(state = initialTasksState.tasks, action: TasksActionTypes) {\n  switch (action.type) {\n    case FETCH_TASKS_SUCCESS:\n      return action.payload;\n\n    case ADD_TASK_SUCCESS:\n      return [...state, action.payload];\n\n    case UPDATE_TASK_TEXT_SUCCESS:\n      return state.map(task =>\n        task.id === action.payload.id ? { ...task, text: action.payload.text } : task,\n      );\n    case UPDATE_TASK_STATUS_SUCCESS:\n      return state.map(task =>\n        task.id === action.payload.id ? { ...task, status: action.payload.status } : task,\n      );\n\n    default:\n      return state;\n  }\n}\n\nfunction loadingReducer(state = initialTasksState.loading, action: TasksActionTypes) {\n  switch (action.type) {\n    case FETCH_TASKS_START:\n      return true;\n\n    case FETCH_TASKS_SUCCESS:\n    case ADD_TASK_SUCCESS:\n    case UPDATE_TASK_TEXT_SUCCESS:\n    case UPDATE_TASK_STATUS_SUCCESS:\n    case FETCH_TASKS_FAIL:\n      return false;\n\n    default:\n      return state;\n  }\n}\n\nfunction errorReducer(state = initialTasksState.error, action: TasksActionTypes) {\n  switch (action.type) {\n    case FETCH_TASKS_SUCCESS:\n    case ADD_TASK_SUCCESS:\n    case UPDATE_TASK_TEXT_SUCCESS:\n    case UPDATE_TASK_STATUS_SUCCESS:\n      return null;\n\n    case FETCH_TASKS_FAIL:\n      return action.payload;\n\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  tasks: tasksReducer,\n  loading: loadingReducer,\n  error: errorReducer,\n});\n\n"]},"metadata":{},"sourceType":"module"}