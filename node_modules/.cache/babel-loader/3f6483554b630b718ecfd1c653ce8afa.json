{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers';\nimport session from './middleware/auth';\nvar middleware = [logger, thunk, session];\nvar enhancer = composeWithDevTools(applyMiddleware.apply(void 0, middleware));\nvar sessionState = null;\n\ntry {\n  sessionState = JSON.parse(localStorage.getItem('session') || '');\n} catch (err) {\n  console.log(err);\n}\n\nvar persistedState = sessionState ? {\n  auth: sessionState\n} : {};\nvar store = createStore(rootReducer, persistedState, enhancer);\nexport default store;","map":{"version":3,"sources":["E:\\برنامه نویسی\\Task Manager\\Front\\TaskManager-React-Typescript\\src\\redux\\store.ts"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","logger","rootReducer","session","middleware","enhancer","sessionState","JSON","parse","localStorage","getItem","err","console","log","persistedState","auth","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,IAAMC,UAAU,GAAG,CAACH,MAAD,EAASD,KAAT,EAAgBG,OAAhB,CAAnB;AAEA,IAAME,QAAQ,GAAGN,mBAAmB,CAACD,eAAe,MAAf,SAAmBM,UAAnB,CAAD,CAApC;AAEA,IAAIE,YAAY,GAAG,IAAnB;;AAEA,IAAI;AACFA,EAAAA,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,KAAmC,EAA9C,CAAf;AACD,CAFD,CAEE,OAAOC,GAAP,EAAY;AACZC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AAED,IAAMG,cAAc,GAAGR,YAAY,GAAG;AAAES,EAAAA,IAAI,EAAET;AAAR,CAAH,GAA4B,EAA/D;AAEA,IAAMU,KAAK,GAAGnB,WAAW,CAACK,WAAD,EAAcY,cAAd,EAA8BT,QAA9B,CAAzB;AAEA,eAAeW,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers';\nimport session from './middleware/auth';\n\nconst middleware = [logger, thunk, session];\n\nconst enhancer = composeWithDevTools(applyMiddleware(...middleware));\n\nlet sessionState = null;\n\ntry {\n  sessionState = JSON.parse(localStorage.getItem('session') || '');\n} catch (err) {\n  console.log(err);\n}\n\nconst persistedState = sessionState ? { auth: sessionState } : {};\n\nconst store = createStore(rootReducer, persistedState, enhancer);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}