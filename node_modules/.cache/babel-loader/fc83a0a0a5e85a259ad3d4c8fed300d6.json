{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\\\u0628\\u0631\\u0646\\u0627\\u0645\\u0647 \\u0646\\u0648\\u06CC\\u0633\\u06CC\\\\Task Manager\\\\Front\\\\TaskManager-React-Typescript\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\\\u0628\\u0631\\u0646\\u0627\\u0645\\u0647 \\u0646\\u0648\\u06CC\\u0633\\u06CC\\\\Task Manager\\\\Front\\\\TaskManager-React-Typescript\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport MD5 from 'md5';\nimport { FETCH_TASKS_START, FETCH_TASKS_SUCCESS, FETCH_TASKS_FAIL, ADD_TASK_SUCCESS, UPDATE_TASK_TEXT_SUCCESS, UPDATE_TASK_STATUS_SUCCESS, UPDATE_TASKS_AMOUNT, CHANGE_SORT_FIELD, CHANGE_SORT_DIRECTION, CHANGE_PAGE, CHANGE_FILTER } from './types';\nvar URL = 'https://localhost:7008/api/task';\n\nvar fetchTasksStart = function fetchTasksStart() {\n  return {\n    type: FETCH_TASKS_START\n  };\n};\n\nexport var fetchTasksSuccess = function fetchTasksSuccess(tasks) {\n  return {\n    type: FETCH_TASKS_SUCCESS,\n    payload: tasks\n  };\n};\nexport var fetchTasksFail = function fetchTasksFail(error) {\n  return {\n    type: FETCH_TASKS_FAIL,\n    payload: error\n  };\n};\nexport var updateTasksAmount = function updateTasksAmount(totalTasks) {\n  return {\n    type: UPDATE_TASKS_AMOUNT,\n    payload: totalTasks\n  };\n};\nexport var addTaskSuccess = function addTaskSuccess(task) {\n  return {\n    type: ADD_TASK_SUCCESS,\n    payload: task\n  };\n};\nexport var updateTaskTextSuccess = function updateTaskTextSuccess(task) {\n  return {\n    type: UPDATE_TASK_TEXT_SUCCESS,\n    payload: task\n  };\n};\nexport var updateTaskStatusSuccess = function updateTaskStatusSuccess(task) {\n  return {\n    type: UPDATE_TASK_STATUS_SUCCESS,\n    payload: task\n  };\n};\nexport var changeSortField = function changeSortField(sortField) {\n  return {\n    type: CHANGE_SORT_FIELD,\n    payload: sortField\n  };\n};\nexport var changeSortDirection = function changeSortDirection(sortDirection) {\n  return {\n    type: CHANGE_SORT_DIRECTION,\n    payload: sortDirection\n  };\n};\nexport var changePage = function changePage(currentPage) {\n  return {\n    type: CHANGE_PAGE,\n    payload: currentPage\n  };\n};\nexport var changeFilter = function changeFilter(filter) {\n  return {\n    type: CHANGE_FILTER,\n    payload: filter\n  };\n}; // export function fetchTasks (sort: Sort) {\n//   const { currentPage, sortField, sortDirection } = sort;\n//   return async (dispatch: Dispatch) => {\n//     dispatch(fetchTasksStart());\n//     dispatch(changePage(currentPage));\n//     dispatch(changeSortField(sortField));\n//     dispatch(changeSortDirection(sortDirection));\n//     try {\n//       const response = await axios.get(\n//         `${URL}/?sort_field=${sortField}&sort_direction=${sortDirection}&page=${currentPage}&developer=Stanislav`,\n//       );\n//       const { data: { message: { tasks, total_task_count: totalTasks } } } = response;\n//       dispatch(fetchTasksSuccess(tasks));\n//       dispatch(updateTasksAmount(Number(totalTasks)));\n//     } catch (err) {\n//       dispatch(fetchTasksFail(err))\n//     }\n//   }\n// };\n\nexport var fetchTasks = function fetchTasks(_ref) {\n  var currentPage = _ref.currentPage,\n      sortField = _ref.sortField,\n      sortDirection = _ref.sortDirection;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch(fetchTasksStart());\n                dispatch(changePage(currentPage));\n                dispatch(changeSortField(sortField));\n                dispatch(changeSortDirection(sortDirection));\n                _context.next = 6;\n                return axios.get(\"\".concat(URL)).then(function (_ref3) {\n                  var data = _ref3.data;\n                  dispatch(fetchTasksSuccess(data));\n                  dispatch(updateTasksAmount(Number(48)));\n                }).catch(function (err) {\n                  return dispatch(fetchTasksFail(err));\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchTasksOnChangePage = function fetchTasksOnChangePage(currentPage, sortField, sortDirection) {\n  return function (dispatch) {\n    dispatch(changePage(currentPage));\n    axios.get(\"\".concat(URL)) //.then(({ data: { message: { tasks, total_task_count: totalTasks } } }) => {\n    .then(function (_ref4) {\n      var data = _ref4.data;\n      dispatch(fetchTasksSuccess(data));\n      dispatch(updateTasksAmount(Number(48)));\n    }).catch(function (err) {\n      return dispatch(fetchTasksFail(err));\n    });\n  };\n};\nexport var fetchSortedTasks = function fetchSortedTasks(_ref5) {\n  var currentPage = _ref5.currentPage,\n      sortField = _ref5.sortField,\n      sortDirection = _ref5.sortDirection;\n  return function (dispatch) {\n    dispatch(fetchTasksStart());\n    dispatch(changeSortField(sortField));\n    dispatch(changeSortDirection(sortDirection));\n    axios.get(\"\".concat(URL)).then(function (_ref6) {\n      var data = _ref6.data;\n      dispatch(fetchTasksSuccess(data));\n      dispatch(updateTasksAmount(Number(48)));\n    }).catch(function (err) {\n      return dispatch(fetchTasksFail(err));\n    });\n  };\n};\nexport var addTask = function addTask(_ref7) {\n  var username = _ref7.username,\n      email = _ref7.email,\n      text = _ref7.text;\n  return function (dispatch) {\n    var task = new FormData();\n    task.append('username', username);\n    task.append('email', email);\n    task.append('text', text);\n    axios.post(\"\".concat(URL, \"/create?developer=Stanislav\"), task).then(function (_ref8) {\n      var data = _ref8.data;\n      console.log(data);\n      dispatch(addTaskSuccess(message));\n    });\n  };\n};\nexport var updateTaskText = function updateTaskText(_ref9) {\n  var id = _ref9.id,\n      text = _ref9.text.text,\n      token = _ref9.token;\n  return function (dispatch) {\n    var taskToUpdate = {\n      id: id,\n      text: text\n    };\n    var url = \"text=\".concat(text, \"&token=\").concat(token);\n    var encodedUrl = encodeURI(url);\n    var hex = MD5(encodedUrl);\n    axios({\n      method: 'post',\n      url: \"\".concat(URL, \"/edit/\").concat(id, \"/?developer=Stanislav\"),\n      data: \"\".concat(url, \"&signature=\").concat(hex)\n    }).then(function (_ref10) {\n      var data = _ref10.data;\n      return data.status === 'ok' && dispatch(updateTaskTextSuccess(taskToUpdate));\n    });\n  };\n};\nexport var updateTaskStatus = function updateTaskStatus(_ref11) {\n  var id = _ref11.id,\n      status = _ref11.status,\n      token = _ref11.token;\n  return function (dispatch) {\n    var taskToUpdate = {\n      id: id,\n      status: status\n    };\n    var url = \"status=\".concat(status, \"&token=\").concat(token);\n    var encodedUrl = encodeURI(url);\n    var hex = MD5(encodedUrl);\n    axios({\n      method: 'post',\n      url: \"\".concat(URL, \"/edit/\").concat(id, \"/?developer=Stanislav\"),\n      data: \"\".concat(url, \"&signature=\").concat(hex)\n    }).then(function (_ref12) {\n      var data = _ref12.data;\n      return data.status === 'ok' && dispatch(updateTaskStatusSuccess(taskToUpdate));\n    });\n  };\n};","map":{"version":3,"sources":["E:\\برنامه نویسی\\Task Manager\\Front\\TaskManager-React-Typescript\\src\\redux\\actions\\tasks.ts"],"names":["axios","MD5","FETCH_TASKS_START","FETCH_TASKS_SUCCESS","FETCH_TASKS_FAIL","ADD_TASK_SUCCESS","UPDATE_TASK_TEXT_SUCCESS","UPDATE_TASK_STATUS_SUCCESS","UPDATE_TASKS_AMOUNT","CHANGE_SORT_FIELD","CHANGE_SORT_DIRECTION","CHANGE_PAGE","CHANGE_FILTER","URL","fetchTasksStart","type","fetchTasksSuccess","tasks","payload","fetchTasksFail","error","updateTasksAmount","totalTasks","addTaskSuccess","task","updateTaskTextSuccess","updateTaskStatusSuccess","changeSortField","sortField","changeSortDirection","sortDirection","changePage","currentPage","changeFilter","filter","fetchTasks","dispatch","get","then","data","Number","catch","err","fetchTasksOnChangePage","fetchSortedTasks","addTask","username","email","text","FormData","append","post","console","log","message","updateTaskText","id","token","taskToUpdate","url","encodedUrl","encodeURI","hex","method","status","updateTaskStatus"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AAIA,SASEC,iBATF,EAUEC,mBAVF,EAWEC,gBAXF,EAYEC,gBAZF,EAaEC,wBAbF,EAcEC,0BAdF,EAeEC,mBAfF,EAgBEC,iBAhBF,EAiBEC,qBAjBF,EAkBEC,WAlBF,EAmBEC,aAnBF,QAoBO,SApBP;AAuBA,IAAMC,GAAG,GAAG,iCAAZ;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAyB;AAC/CC,IAAAA,IAAI,EAAEb;AADyC,GAAzB;AAAA,CAAxB;;AAIA,OAAO,IAAMc,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD;AAAA,SAAuC;AACtEF,IAAAA,IAAI,EAAEZ,mBADgE;AAEtEe,IAAAA,OAAO,EAAED;AAF6D,GAAvC;AAAA,CAA1B;AAKP,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SAA6C;AACzEL,IAAAA,IAAI,EAAEX,gBADmE;AAEzEc,IAAAA,OAAO,EAAEE;AAFgE,GAA7C;AAAA,CAAvB;AAKP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,UAAD;AAAA,SAA2C;AAC1EP,IAAAA,IAAI,EAAEP,mBADoE;AAE1EU,IAAAA,OAAO,EAAEI;AAFiE,GAA3C;AAAA,CAA1B;AAKP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD;AAAA,SAAoC;AAChET,IAAAA,IAAI,EAAEV,gBAD0D;AAEhEa,IAAAA,OAAO,EAAEM;AAFuD,GAApC;AAAA,CAAvB;AAKP,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACD,IAAD;AAAA,SAAgD;AACnFT,IAAAA,IAAI,EAAET,wBAD6E;AAEnFY,IAAAA,OAAO,EAAEM;AAF0E,GAAhD;AAAA,CAA9B;AAKP,OAAO,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACF,IAAD;AAAA,SAAkD;AACvFT,IAAAA,IAAI,EAAER,0BADiF;AAEvFW,IAAAA,OAAO,EAAEM;AAF8E,GAAlD;AAAA,CAAhC;AAKP,OAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACC,SAAD;AAAA,SAAyC;AACtEb,IAAAA,IAAI,EAAEN,iBADgE;AAEtES,IAAAA,OAAO,EAAEU;AAF6D,GAAzC;AAAA,CAAxB;AAKP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,aAAD;AAAA,SAA6C;AAC9Ef,IAAAA,IAAI,EAAEL,qBADwE;AAE9EQ,IAAAA,OAAO,EAAEY;AAFqE,GAA7C;AAAA,CAA5B;AAKP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,WAAD;AAAA,SAA4C;AACpEjB,IAAAA,IAAI,EAAEJ,WAD8D;AAEpEO,IAAAA,OAAO,EAAEc;AAF2D,GAA5C;AAAA,CAAnB;AAKP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD;AAAA,SAAuC;AACjEnB,IAAAA,IAAI,EAAEH,aAD2D;AAEjEM,IAAAA,OAAO,EAAEgB;AAFwD,GAAvC;AAAA,CAArB,C,CAKP;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,MACxBH,WADwB,QACxBA,WADwB;AAAA,MAExBJ,SAFwB,QAExBA,SAFwB;AAAA,MAGxBE,aAHwB,QAGxBA,aAHwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAMuD,iBAAMM,QAAN;AAAA;AAAA;AAAA;AAAA;AAC7EA,gBAAAA,QAAQ,CAACtB,eAAe,EAAhB,CAAR;AACAsB,gBAAAA,QAAQ,CAACL,UAAU,CAACC,WAAD,CAAX,CAAR;AACAI,gBAAAA,QAAQ,CAACT,eAAe,CAACC,SAAD,CAAhB,CAAR;AACAQ,gBAAAA,QAAQ,CAACP,mBAAmB,CAACC,aAAD,CAApB,CAAR;AAJ6E;AAAA,uBAMzE9B,KAAK,CAACqC,GAAN,WACDxB,GADC,GAGHyB,IAHG,CAGE,iBAAY;AAAA,sBAAVC,IAAU,SAAVA,IAAU;AAClBH,kBAAAA,QAAQ,CAACpB,iBAAiB,CAACuB,IAAD,CAAlB,CAAR;AACAH,kBAAAA,QAAQ,CAACf,iBAAiB,CAACmB,MAAM,CAAC,EAAD,CAAP,CAAlB,CAAR;AACD,iBANK,EAOHC,KAPG,CAOG,UAAAC,GAAG;AAAA,yBAAIN,QAAQ,CAACjB,cAAc,CAACuB,GAAD,CAAf,CAAZ;AAAA,iBAPN,CANyE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OANvD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAsBP,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CACpCX,WADoC,EAEpCJ,SAFoC,EAGpCE,aAHoC;AAAA,SAIkB,UAAAM,QAAQ,EAAI;AAClEA,IAAAA,QAAQ,CAACL,UAAU,CAACC,WAAD,CAAX,CAAR;AAEAhC,IAAAA,KAAK,CACFqC,GADH,WAEOxB,GAFP,GAIE;AAJF,KAKGyB,IALH,CAKQ,iBAAY;AAAA,UAAVC,IAAU,SAAVA,IAAU;AAChBH,MAAAA,QAAQ,CAACpB,iBAAiB,CAACuB,IAAD,CAAlB,CAAR;AACAH,MAAAA,QAAQ,CAACf,iBAAiB,CAACmB,MAAM,CAAC,EAAD,CAAP,CAAlB,CAAR;AACD,KARH,EASGC,KATH,CASS,UAAAC,GAAG;AAAA,aAAIN,QAAQ,CAACjB,cAAc,CAACuB,GAAD,CAAf,CAAZ;AAAA,KATZ;AAUD,GAjBqC;AAAA,CAA/B;AAmBP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAC9BZ,WAD8B,SAC9BA,WAD8B;AAAA,MAE9BJ,SAF8B,SAE9BA,SAF8B;AAAA,MAG9BE,aAH8B,SAG9BA,aAH8B;AAAA,SAMiD,UAAAM,QAAQ,EAAI;AAC3FA,IAAAA,QAAQ,CAACtB,eAAe,EAAhB,CAAR;AACAsB,IAAAA,QAAQ,CAACT,eAAe,CAACC,SAAD,CAAhB,CAAR;AACAQ,IAAAA,QAAQ,CAACP,mBAAmB,CAACC,aAAD,CAApB,CAAR;AAEA9B,IAAAA,KAAK,CACFqC,GADH,WAEOxB,GAFP,GAIGyB,IAJH,CAIQ,iBAAa;AAAA,UAAVC,IAAU,SAAVA,IAAU;AACjBH,MAAAA,QAAQ,CAACpB,iBAAiB,CAACuB,IAAD,CAAlB,CAAR;AACAH,MAAAA,QAAQ,CAACf,iBAAiB,CAACmB,MAAM,CAAC,EAAD,CAAP,CAAlB,CAAR;AACD,KAPH,EAQGC,KARH,CAQS,UAAAC,GAAG;AAAA,aAAIN,QAAQ,CAACjB,cAAc,CAACuB,GAAD,CAAf,CAAZ;AAAA,KARZ;AASD,GApB+B;AAAA,CAAzB;AAsBP,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU;AAAA,MAAGC,QAAH,SAAGA,QAAH;AAAA,MAAaC,KAAb,SAAaA,KAAb;AAAA,MAAoBC,IAApB,SAAoBA,IAApB;AAAA,SACrB,UAAAZ,QAAQ,EAAI;AACZ,QAAMZ,IAAI,GAAG,IAAIyB,QAAJ,EAAb;AACAzB,IAAAA,IAAI,CAAC0B,MAAL,CAAY,UAAZ,EAAwBJ,QAAxB;AACAtB,IAAAA,IAAI,CAAC0B,MAAL,CAAY,OAAZ,EAAqBH,KAArB;AACAvB,IAAAA,IAAI,CAAC0B,MAAL,CAAY,MAAZ,EAAoBF,IAApB;AAEAhD,IAAAA,KAAK,CAACmD,IAAN,WAActC,GAAd,kCAAgDW,IAAhD,EACCc,IADD,CACM,iBAAY;AAAA,UAAVC,IAAU,SAAVA,IAAU;AAChBa,MAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AACAH,MAAAA,QAAQ,CAACb,cAAc,CAAC+B,OAAD,CAAf,CAAR;AACD,KAJD;AAKD,GAZsB;AAAA,CAAhB;AAcP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MAC5BC,EAD4B,SAC5BA,EAD4B;AAAA,MAEpBR,IAFoB,SAE5BA,IAF4B,CAEpBA,IAFoB;AAAA,MAG5BS,KAH4B,SAG5BA,KAH4B;AAAA,SAQ2B,UAAArB,QAAQ,EAAI;AACnE,QAAMsB,YAAY,GAAG;AAAEF,MAAAA,EAAE,EAAFA,EAAF;AAAMR,MAAAA,IAAI,EAAJA;AAAN,KAArB;AACA,QAAMW,GAAG,kBAAWX,IAAX,oBAAyBS,KAAzB,CAAT;AACA,QAAMG,UAAU,GAAGC,SAAS,CAACF,GAAD,CAA5B;AACA,QAAMG,GAAG,GAAG7D,GAAG,CAAC2D,UAAD,CAAf;AAEA5D,IAAAA,KAAK,CAAC;AACJ+D,MAAAA,MAAM,EAAE,MADJ;AAEJJ,MAAAA,GAAG,YAAK9C,GAAL,mBAAiB2C,EAAjB,0BAFC;AAGJjB,MAAAA,IAAI,YAAKoB,GAAL,wBAAsBG,GAAtB;AAHA,KAAD,CAAL,CAIGxB,IAJH,CAKE;AAAA,UAAGC,IAAH,UAAGA,IAAH;AAAA,aACEA,IAAI,CAACyB,MAAL,KAAgB,IAAhB,IAAwB5B,QAAQ,CAACX,qBAAqB,CAACiC,YAAD,CAAtB,CADlC;AAAA,KALF;AAQD,GAtB6B;AAAA,CAAvB;AAwBP,OAAO,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAC9BT,EAD8B,UAC9BA,EAD8B;AAAA,MAE9BQ,MAF8B,UAE9BA,MAF8B;AAAA,MAG9BP,KAH8B,UAG9BA,KAH8B;AAAA,SAQyB,UAAArB,QAAQ,EAAI;AACnE,QAAMsB,YAAY,GAAG;AAAEF,MAAAA,EAAE,EAAFA,EAAF;AAAMQ,MAAAA,MAAM,EAANA;AAAN,KAArB;AACA,QAAML,GAAG,oBAAaK,MAAb,oBAA6BP,KAA7B,CAAT;AACA,QAAMG,UAAU,GAAGC,SAAS,CAACF,GAAD,CAA5B;AACA,QAAMG,GAAG,GAAG7D,GAAG,CAAC2D,UAAD,CAAf;AAEA5D,IAAAA,KAAK,CAAC;AACJ+D,MAAAA,MAAM,EAAE,MADJ;AAEJJ,MAAAA,GAAG,YAAK9C,GAAL,mBAAiB2C,EAAjB,0BAFC;AAGJjB,MAAAA,IAAI,YAAKoB,GAAL,wBAAsBG,GAAtB;AAHA,KAAD,CAAL,CAIGxB,IAJH,CAKE;AAAA,UAAGC,IAAH,UAAGA,IAAH;AAAA,aACEA,IAAI,CAACyB,MAAL,KAAgB,IAAhB,IAAwB5B,QAAQ,CAACV,uBAAuB,CAACgC,YAAD,CAAxB,CADlC;AAAA,KALF;AAQD,GAtB+B;AAAA,CAAzB","sourcesContent":["import axios from 'axios';\nimport MD5 from 'md5';\nimport { Action, Dispatch } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { AppState } from '../reducers';\nimport {\n  ITask,\n  INewTask,\n  ITaskToUpdateText,\n  ITaskToUpdateStatus,\n  TasksActionTypes,\n  PagerActionTypes,\n  SortActionTypes,\n  FilterActionType,\n  FETCH_TASKS_START,\n  FETCH_TASKS_SUCCESS,\n  FETCH_TASKS_FAIL,\n  ADD_TASK_SUCCESS,\n  UPDATE_TASK_TEXT_SUCCESS,\n  UPDATE_TASK_STATUS_SUCCESS,\n  UPDATE_TASKS_AMOUNT,\n  CHANGE_SORT_FIELD,\n  CHANGE_SORT_DIRECTION,\n  CHANGE_PAGE,\n  CHANGE_FILTER,\n} from './types';\nimport Sort from '../../interfaces/Sort.interface';\n\nconst URL = 'https://localhost:7008/api/task';\n\nconst fetchTasksStart = (): TasksActionTypes => ({\n  type: FETCH_TASKS_START,\n});\n\nexport const fetchTasksSuccess = (tasks: ITask[]): TasksActionTypes => ({\n  type: FETCH_TASKS_SUCCESS,\n  payload: tasks,\n});\n\nexport const fetchTasksFail = (error: string | null): TasksActionTypes => ({\n  type: FETCH_TASKS_FAIL,\n  payload: error,\n});\n\nexport const updateTasksAmount = (totalTasks: number): PagerActionTypes => ({\n  type: UPDATE_TASKS_AMOUNT,\n  payload: totalTasks,\n});\n\nexport const addTaskSuccess = (task: ITask): TasksActionTypes => ({\n  type: ADD_TASK_SUCCESS,\n  payload: task,\n});\n\nexport const updateTaskTextSuccess = (task: ITaskToUpdateText): TasksActionTypes => ({\n  type: UPDATE_TASK_TEXT_SUCCESS,\n  payload: task,\n});\n\nexport const updateTaskStatusSuccess = (task: ITaskToUpdateStatus): TasksActionTypes => ({\n  type: UPDATE_TASK_STATUS_SUCCESS,\n  payload: task,\n});\n\nexport const changeSortField = (sortField: string): SortActionTypes => ({\n  type: CHANGE_SORT_FIELD,\n  payload: sortField,\n});\n\nexport const changeSortDirection = (sortDirection: string): SortActionTypes => ({\n  type: CHANGE_SORT_DIRECTION,\n  payload: sortDirection,\n});\n\nexport const changePage = (currentPage: number): PagerActionTypes => ({\n  type: CHANGE_PAGE,\n  payload: currentPage,\n});\n\nexport const changeFilter = (filter: string): FilterActionType => ({\n  type: CHANGE_FILTER,\n  payload: filter,\n});\n\n// export function fetchTasks (sort: Sort) {\n//   const { currentPage, sortField, sortDirection } = sort;\n\n//   return async (dispatch: Dispatch) => {\n//     dispatch(fetchTasksStart());\n//     dispatch(changePage(currentPage));\n//     dispatch(changeSortField(sortField));\n//     dispatch(changeSortDirection(sortDirection));\n\n//     try {\n//       const response = await axios.get(\n//         `${URL}/?sort_field=${sortField}&sort_direction=${sortDirection}&page=${currentPage}&developer=Stanislav`,\n//       );\n//       const { data: { message: { tasks, total_task_count: totalTasks } } } = response;\n//       dispatch(fetchTasksSuccess(tasks));\n//       dispatch(updateTasksAmount(Number(totalTasks)));\n//     } catch (err) {\n//       dispatch(fetchTasksFail(err))\n//     }\n//   }\n// };\n\nexport const fetchTasks = ({\n  currentPage,\n  sortField,\n  sortDirection,\n}: { currentPage: number,\n  sortField: string,\n  sortDirection: string }): ThunkAction<void, AppState, null, Action<string>> => async dispatch => {\n    dispatch(fetchTasksStart());\n    dispatch(changePage(currentPage));\n    dispatch(changeSortField(sortField));\n    dispatch(changeSortDirection(sortDirection));\n\n  await axios.get(\n    `${URL}`,\n  )\n    .then(({data}) => {\n    dispatch(fetchTasksSuccess(data));\n    dispatch(updateTasksAmount(Number(48)));\n  })\n    .catch(err => dispatch(fetchTasksFail(err)))\n};\n\nexport const fetchTasksOnChangePage = (\n  currentPage: number,\n  sortField: string,\n  sortDirection: string,\n): ThunkAction<void, AppState, null, Action<string>> => dispatch => {\n  dispatch(changePage(currentPage));\n\n  axios\n    .get(\n      `${URL}`,\n    )\n    //.then(({ data: { message: { tasks, total_task_count: totalTasks } } }) => {\n    .then(({data}) => {\n      dispatch(fetchTasksSuccess(data));\n      dispatch(updateTasksAmount(Number(48)));\n    })\n    .catch(err => dispatch(fetchTasksFail(err)));\n};\n\nexport const fetchSortedTasks = ({\n  currentPage,\n  sortField,\n  sortDirection,\n}: { currentPage: number,\n  sortField: string,\n  sortDirection: string }): ThunkAction<void, AppState, null, Action<string>> => dispatch => {\n  dispatch(fetchTasksStart());\n  dispatch(changeSortField(sortField));\n  dispatch(changeSortDirection(sortDirection));\n\n  axios\n    .get(\n      `${URL}`,\n    )\n    .then(({ data}) => {\n      dispatch(fetchTasksSuccess(data));\n      dispatch(updateTasksAmount(Number(48)));\n    })\n    .catch(err => dispatch(fetchTasksFail(err)));\n};\n\nexport const addTask = ({ username, email, text }: INewTask): ThunkAction<void, AppState, null, Action<string>> =>\n  dispatch => {\n  const task = new FormData();\n  task.append('username', username);\n  task.append('email', email);\n  task.append('text', text);\n\n  axios.post(`${URL}/create?developer=Stanislav`, task)\n  .then(({data}) => {\n    console.log(data);\n    dispatch(addTaskSuccess(message));\n  })\n};\n\nexport const updateTaskText = ({\n  id,\n  text: { text },\n  token,\n}: {\n  id: number;\n  text: { text: string };\n  token: string;\n}): ThunkAction<void, AppState, null, Action<string>> => dispatch => {\n  const taskToUpdate = { id, text };\n  const url = `text=${text}&token=${token}`;\n  const encodedUrl = encodeURI(url);\n  const hex = MD5(encodedUrl);\n\n  axios({\n    method: 'post',\n    url: `${URL}/edit/${id}/?developer=Stanislav`,\n    data: `${url}&signature=${hex}`,\n  }).then(\n    ({ data }: { data: { status: string } }) =>\n      data.status === 'ok' && dispatch(updateTaskTextSuccess(taskToUpdate)),\n  );\n};\n\nexport const updateTaskStatus = ({\n  id,\n  status,\n  token,\n}: {\n  id: number;\n  status: number;\n  token: string;\n}): ThunkAction<void, AppState, null, Action<string>> => dispatch => {\n  const taskToUpdate = { id, status };\n  const url = `status=${status}&token=${token}`;\n  const encodedUrl = encodeURI(url);\n  const hex = MD5(encodedUrl);\n\n  axios({\n    method: 'post',\n    url: `${URL}/edit/${id}/?developer=Stanislav`,\n    data: `${url}&signature=${hex}`,\n  }).then(\n    ({ data }: { data: { status: string } }) =>\n      data.status === 'ok' && dispatch(updateTaskStatusSuccess(taskToUpdate)),\n  );\n};\n"]},"metadata":{},"sourceType":"module"}