{"ast":null,"code":"import _toConsumableArray from \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\src\\\\components\\\\shared\\\\Pager.tsx\";\n// Core\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // Components\n\nimport PagerButton from './PagerButton'; // Instruments\n// import PagerProps from '../../interfaces/Pager.interface';\n// import ISort from '../../interfaces/Sort.interface';\n\nimport { fetchTasksOnChangePage } from '../../redux/actions/tasks';\nvar styles = {\n  list: {\n    display: 'flex',\n    justifyContent: 'center',\n    paddingLeft: 0,\n    listStyle: 'none'\n  }\n};\n\nvar Pager =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Pager, _Component);\n\n  function Pager() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Pager);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Pager)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      pager: {\n        totalItems: 0,\n        currentPage: 1,\n        pageSize: 3,\n        totalPages: 0,\n        startPage: 1,\n        endPage: 1,\n        startIndex: 0,\n        endIndex: 0,\n        pages: []\n      }\n    };\n\n    _this.setPage = function (page) {\n      var _this$props = _this.props,\n          totalItems = _this$props.totalItems,\n          pageSize = _this$props.pageSize,\n          sortField = _this$props.sortField,\n          sortDirection = _this$props.sortDirection; // calculate total pages\n\n      var totalPages = Math.ceil(totalItems / pageSize);\n      var pager = _this.state.pager;\n\n      if (page < 1 || page > totalPages) {\n        return;\n      } // get new pager object for specified page\n\n\n      pager = _this.getPager(totalItems, page, pageSize); // update state\n\n      _this.setState({\n        pager: pager\n      }); // call change page function\n\n\n      _this.props.fetchTasksOnChangePage(page, sortField, sortDirection);\n    };\n\n    _this.getPager = function (totalItems, currentPage, pageSize) {\n      // calculate total pages\n      var totalPages = Math.ceil(totalItems / pageSize);\n      var startPage;\n      var endPage;\n\n      if (totalPages <= 10) {\n        // less than 10 total pages so show all\n        startPage = 1;\n        endPage = totalPages;\n      } else {\n        // more than 10 total pages so calculate start and end pages\n        if (currentPage <= 6) {\n          startPage = 1;\n          endPage = 10;\n        } else if (currentPage + 4 >= totalPages) {\n          startPage = totalPages - 9;\n          endPage = totalPages;\n        } else {\n          startPage = currentPage - 5;\n          endPage = currentPage + 4;\n        }\n      } // calculate start and end item indexes\n\n\n      var startIndex = (currentPage - 1) * pageSize;\n      var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1); // create an array of pages to ng-repeat in the pager control\n\n      var pages = _toConsumableArray(Array(endPage + 1 - startPage).keys()).map(function (i) {\n        return startPage + i;\n      }); // return object with all pager properties required by the view\n\n\n      return {\n        totalItems: totalItems,\n        currentPage: currentPage,\n        pageSize: pageSize,\n        totalPages: totalPages,\n        startPage: startPage,\n        endPage: endPage,\n        startIndex: startIndex,\n        endIndex: endIndex,\n        pages: pages\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Pager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // set page if items array isn't empty\n      if (this.props.items && this.props.items.length) {\n        this.setPage(this.props.initialPage);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // reset page if initialPage has changed\n      if (this.props.initialPage !== prevProps.initialPage || this.props.totalItems !== prevProps.totalItems) {\n        this.setPage(this.props.initialPage);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var pager = this.state.pager; // doesn't display pager if there is only 1 page\n\n      if (!pager.pages || pager.pages.length <= 1) {\n        return null;\n      }\n\n      return React.createElement(\"ul\", {\n        style: styles.list,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(PagerButton, {\n        disabled: pager.currentPage === 1,\n        onClick: function onClick() {\n          return _this2.setPage(1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"First\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(PagerButton, {\n        disabled: pager.currentPage === 1,\n        onClick: function onClick() {\n          return _this2.setPage(pager.currentPage - 1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"Previous\")), pager.pages.map(function (page) {\n        return React.createElement(\"li\", {\n          key: page,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, React.createElement(PagerButton, {\n          active: pager.currentPage === page,\n          onClick: function onClick() {\n            return _this2.setPage(page);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, page));\n      }), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(PagerButton, {\n        disabled: pager.currentPage === pager.totalPages,\n        onClick: function onClick() {\n          return _this2.setPage(pager.currentPage + 1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Next\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(PagerButton, {\n        disabled: pager.currentPage === pager.totalPages,\n        onClick: function onClick() {\n          return _this2.setPage(pager.totalPages);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Last\")));\n    }\n  }]);\n\n  return Pager;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    items: state.tasks.tasks,\n    initialPage: state.pager.currentPage,\n    totalItems: state.pager.totalItems,\n    pageSize: state.pager.pageSize,\n    sortField: state.sort.sortField,\n    sortDirection: state.sort.sortDirection\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchTasksOnChangePage: fetchTasksOnChangePage\n})(Pager);","map":{"version":3,"sources":["D:\\MiladShafiyan\\TaskManager\\Front\\task-manager-typescript-app-master\\src\\components\\shared\\Pager.tsx"],"names":["React","Component","connect","PagerButton","fetchTasksOnChangePage","styles","list","display","justifyContent","paddingLeft","listStyle","Pager","state","pager","totalItems","currentPage","pageSize","totalPages","startPage","endPage","startIndex","endIndex","pages","setPage","page","props","sortField","sortDirection","Math","ceil","getPager","setState","min","Array","keys","map","i","items","length","initialPage","prevProps","mapStateToProps","tasks","sort"],"mappings":"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","sourcesContent":["// Core\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// Components\nimport PagerButton from './PagerButton';\n// Instruments\n// import PagerProps from '../../interfaces/Pager.interface';\n// import ISort from '../../interfaces/Sort.interface';\nimport { AppState } from '../../redux/reducers';\nimport { ITasksState, ISortState, IPagerState } from '../../redux/actions/types';\nimport { fetchTasksOnChangePage } from '../../redux/actions/tasks';\n\ninterface PagerProps {\n  items: ITasksState['tasks'];\n  initialPage: IPagerState['currentPage'];\n  totalItems: IPagerState['totalItems'];\n  pageSize: IPagerState['pageSize'];\n  sortField: ISortState['sortField'];\n  sortDirection: ISortState['sortDirection'];\n  fetchTasksOnChangePage: (page: number, sortField: string, sortDirection: string) => void;\n}\n\ninterface PagerState {\n  pager: {\n    totalItems: number;\n    currentPage: number;\n    pageSize: number;\n    totalPages: number;\n    startPage: number;\n    endPage: number;\n    startIndex: number;\n    endIndex: number;\n    pages: Array<number>;\n  }\n}\n\nconst styles = {\n  list: {\n    display: 'flex',\n    justifyContent: 'center',\n    paddingLeft: 0,\n    listStyle: 'none',\n  },\n};\n\nclass Pager extends Component<PagerProps, PagerState> {\n  state = { pager: {\n    totalItems: 0,\n    currentPage: 1,\n    pageSize: 3,\n    totalPages: 0,\n    startPage: 1,\n    endPage: 1,\n    startIndex: 0,\n    endIndex: 0,\n    pages: [] as number[],\n  } };\n\n\n  componentDidMount() {\n    // set page if items array isn't empty\n    if (this.props.items && this.props.items.length) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  componentDidUpdate(prevProps: PagerProps) {\n    // reset page if initialPage has changed\n    if (\n      this.props.initialPage !== prevProps.initialPage ||\n      this.props.totalItems !== prevProps.totalItems\n    ) {\n      this.setPage(this.props.initialPage);\n    }\n  }\n\n  setPage = (page: number) => {\n    const { totalItems, pageSize, sortField, sortDirection } = this.props;\n    // calculate total pages\n    const totalPages = Math.ceil(totalItems / pageSize);\n\n    let pager = this.state.pager;\n\n    if (page < 1 || page > totalPages) {\n      return;\n    }\n\n    // get new pager object for specified page\n    pager = this.getPager(totalItems, page, pageSize);\n\n    // update state\n    this.setState({ pager });\n\n    // call change page function\n    this.props.fetchTasksOnChangePage(page, sortField, sortDirection);\n  };\n\n  getPager = (totalItems: number, currentPage: number, pageSize: number) => {\n    // calculate total pages\n    const totalPages = Math.ceil(totalItems / pageSize);\n\n    let startPage: number;\n    let endPage: number;\n    if (totalPages <= 10) {\n      // less than 10 total pages so show all\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // more than 10 total pages so calculate start and end pages\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    }\n\n    // calculate start and end item indexes\n    const startIndex = (currentPage - 1) * pageSize;\n    const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n    // create an array of pages to ng-repeat in the pager control\n    const pages = [...Array(endPage + 1 - startPage).keys()].map(\n      i => startPage + i,\n    );\n\n    // return object with all pager properties required by the view\n    return {\n      totalItems,\n      currentPage,\n      pageSize,\n      totalPages,\n      startPage,\n      endPage,\n      startIndex,\n      endIndex,\n      pages,\n    };\n  };\n\n  render() {\n    const { pager } = this.state;\n    // doesn't display pager if there is only 1 page\n    if (!pager.pages || pager.pages.length <= 1) {\n      return null;\n    }\n\n    return (\n      <ul style={styles.list}>\n        <li>\n          <PagerButton\n            disabled={pager.currentPage === 1}\n            onClick={() => this.setPage(1)}>\n            First\n          </PagerButton>\n        </li>\n        <li>\n          <PagerButton\n            disabled={pager.currentPage === 1}\n            onClick={() => this.setPage(pager.currentPage - 1)}>\n            Previous\n          </PagerButton>\n        </li>\n        {pager.pages.map(page => (\n          <li key={page}>\n            <PagerButton\n              active={pager.currentPage === page}\n              onClick={() => this.setPage(page)}>\n              {page}\n            </PagerButton>\n          </li>\n        ))}\n        <li>\n          <PagerButton\n            disabled={pager.currentPage === pager.totalPages}\n            onClick={() => this.setPage(pager.currentPage + 1)}>\n            Next\n          </PagerButton>\n        </li>\n        <li>\n          <PagerButton\n            disabled={pager.currentPage === pager.totalPages}\n            onClick={() => this.setPage(pager.totalPages)}>\n            Last\n          </PagerButton>\n        </li>\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  items: state.tasks.tasks,\n  initialPage: state.pager.currentPage,\n  totalItems: state.pager.totalItems,\n  pageSize: state.pager.pageSize,\n  sortField: state.sort.sortField,\n  sortDirection: state.sort.sortDirection,\n});\n\nexport default connect(\n  mapStateToProps,\n  { fetchTasksOnChangePage }\n)(Pager);\n"]},"metadata":{},"sourceType":"module"}