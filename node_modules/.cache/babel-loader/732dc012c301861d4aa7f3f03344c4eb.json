{"ast":null,"code":"import _classCallCheck from \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\MiladShafiyan\\\\TaskManager\\\\Front\\\\task-manager-typescript-app-master\\\\src\\\\components\\\\Task\\\\index.tsx\";\n// Core\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // Components\n\nimport Checkbox from '../shared/Checkbox';\nimport EditableInput from '../shared/EditableInput';\nimport Button from '../shared/Button'; // Instruments\n\nimport { updateTaskText, updateTaskStatus } from '../../redux/actions/tasks';\nimport styles from './styles.module.css';\n\nvar Task =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Task, _Component);\n\n  function Task() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Task);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Task)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isBeingEdited: false,\n      checked: false\n    };\n\n    _this.onEditStart = function () {\n      return _this.setState({\n        isBeingEdited: true\n      });\n    };\n\n    _this.onEditEnd = function () {\n      return _this.setState({\n        isBeingEdited: false\n      });\n    };\n\n    _this.handleCheckboxChange = function (e) {\n      _this.setState({\n        checked: e.target.checked\n      }, function () {\n        var status = _this.state.checked ? 10 : 0;\n        var token = 'beejee';\n\n        _this.props.updateTaskStatus({\n          id: _this.props.task.id,\n          status: status,\n          token: token\n        });\n      });\n    };\n\n    _this.handleUpdate = function (text) {\n      var token = 'beejee';\n\n      _this.props.updateTaskText({\n        id: _this.props.task.id,\n        text: text,\n        token: token\n      });\n\n      _this.onEditEnd();\n    };\n\n    return _this;\n  }\n\n  _createClass(Task, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.task.status === 10) {\n        this.setState({\n          checked: true\n        });\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var propsChanged = nextProps.task.text !== this.props.task.text || nextProps.task.status !== this.props.task.status || nextProps.authenticated !== this.props.authenticated;\n      var stateChanged = this.state.isBeingEdited !== nextState.isBeingEdited || this.state.checked !== nextState.checked;\n      return propsChanged || stateChanged;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var authenticated = this.props.authenticated;\n      var _this$props$task = this.props.task,\n          id = _this$props$task.id,\n          username = _this$props$task.username,\n          email = _this$props$task.email,\n          text = _this$props$task.text;\n      var _this$state = this.state,\n          checked = _this$state.checked,\n          isBeingEdited = _this$state.isBeingEdited;\n      return React.createElement(\"div\", {\n        className: styles.task,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: String(id),\n        style: {\n          marginBottom: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        id: String(id),\n        checked: checked,\n        disabled: !authenticated,\n        onChange: this.handleCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        style: {\n          marginLeft: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, checked ? 'Completed' : 'Uncompleted')), React.createElement(\"p\", {\n        className: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: styles.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Username: \"), username), React.createElement(\"p\", {\n        className: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: styles.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Email: \"), email), isBeingEdited ? React.createElement(EditableInput, {\n        text: text,\n        onEditSuccess: this.handleUpdate,\n        onEditAbort: this.onEditEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }) : React.createElement(React.Fragment, null, React.createElement(\"p\", {\n        className: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: styles.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Text: \"), text), React.createElement(\"div\", {\n        className: styles.actions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Button, {\n        disabled: !authenticated,\n        onClick: this.onEditStart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Edit\"))));\n    }\n  }]);\n\n  return Task;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    authenticated: state.auth.authenticated\n  };\n};\n\nvar mapDispatchToProps = {\n  updateTaskText: updateTaskText,\n  updateTaskStatus: updateTaskStatus\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);","map":{"version":3,"sources":["D:\\MiladShafiyan\\TaskManager\\Front\\task-manager-typescript-app-master\\src\\components\\Task\\index.tsx"],"names":["React","Component","connect","Checkbox","EditableInput","Button","updateTaskText","updateTaskStatus","styles","Task","state","isBeingEdited","checked","onEditStart","setState","onEditEnd","handleCheckboxChange","e","target","status","token","props","id","task","handleUpdate","text","nextProps","nextState","propsChanged","authenticated","stateChanged","username","email","String","marginBottom","marginLeft","title","actions","mapStateToProps","auth","mapDispatchToProps"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAA8C,OAA9C;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,MAAP,MAAmB,kBAAnB,C,CACA;;AAGA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,2BAAjD;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;IA8BMC,I;;;;;;;;;;;;;;;;;UACJC,K,GAAe;AAAEC,MAAAA,aAAa,EAAE,KAAjB;AAAwBC,MAAAA,OAAO,EAAE;AAAjC,K;;UAuBfC,W,GAAc;AAAA,aAAM,MAAKC,QAAL,CAAc;AAAEH,QAAAA,aAAa,EAAE;AAAjB,OAAd,CAAN;AAAA,K;;UAEdI,S,GAAY;AAAA,aAAM,MAAKD,QAAL,CAAc;AAAEH,QAAAA,aAAa,EAAE;AAAjB,OAAd,CAAN;AAAA,K;;UAEZK,oB,GAAuB,UAACC,CAAD,EAAsC;AAC3D,YAAKH,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAEK,CAAC,CAACC,MAAF,CAASN;AAApB,OAAd,EAA6C,YAAM;AACjD,YAAMO,MAAM,GAAG,MAAKT,KAAL,CAAWE,OAAX,GAAqB,EAArB,GAA0B,CAAzC;AACA,YAAMQ,KAAK,GAAG,QAAd;;AAEA,cAAKC,KAAL,CAAWd,gBAAX,CAA4B;AAC1Be,UAAAA,EAAE,EAAE,MAAKD,KAAL,CAAWE,IAAX,CAAgBD,EADM;AAE1BH,UAAAA,MAAM,EAANA,MAF0B;AAG1BC,UAAAA,KAAK,EAALA;AAH0B,SAA5B;AAKD,OATD;AAUD,K;;UAEDI,Y,GAAe,UAACC,IAAD,EAA4B;AACzC,UAAML,KAAK,GAAG,QAAd;;AAEA,YAAKC,KAAL,CAAWf,cAAX,CAA0B;AAAEgB,QAAAA,EAAE,EAAE,MAAKD,KAAL,CAAWE,IAAX,CAAgBD,EAAtB;AAA0BG,QAAAA,IAAI,EAAJA,IAA1B;AAAgCL,QAAAA,KAAK,EAALA;AAAhC,OAA1B;;AACA,YAAKL,SAAL;AACD,K;;;;;;;wCA3CmB;AAClB,UAAI,KAAKM,KAAL,CAAWE,IAAX,CAAgBJ,MAAhB,KAA2B,EAA/B,EAAmC;AACjC,aAAKL,QAAL,CAAc;AACZF,UAAAA,OAAO,EAAE;AADG,SAAd;AAGD;AACF;;;0CAEqBc,S,EAAsBC,S,EAAkB;AAC5D,UAAMC,YAAY,GAChBF,SAAS,CAACH,IAAV,CAAeE,IAAf,KAAwB,KAAKJ,KAAL,CAAWE,IAAX,CAAgBE,IAAxC,IACAC,SAAS,CAACH,IAAV,CAAeJ,MAAf,KAA0B,KAAKE,KAAL,CAAWE,IAAX,CAAgBJ,MAD1C,IAEAO,SAAS,CAACG,aAAV,KAA4B,KAAKR,KAAL,CAAWQ,aAHzC;AAKA,UAAMC,YAAY,GAChB,KAAKpB,KAAL,CAAWC,aAAX,KAA6BgB,SAAS,CAAChB,aAAvC,IACA,KAAKD,KAAL,CAAWE,OAAX,KAAuBe,SAAS,CAACf,OAFnC;AAIA,aAAOgB,YAAY,IAAIE,YAAvB;AACD;;;6BA0BQ;AAAA,UACCD,aADD,GACmB,KAAKR,KADxB,CACCQ,aADD;AAAA,6BAE+B,KAAKR,KAAL,CAAWE,IAF1C;AAAA,UAECD,EAFD,oBAECA,EAFD;AAAA,UAEKS,QAFL,oBAEKA,QAFL;AAAA,UAEeC,KAFf,oBAEeA,KAFf;AAAA,UAEsBP,IAFtB,oBAEsBA,IAFtB;AAAA,wBAG4B,KAAKf,KAHjC;AAAA,UAGCE,OAHD,eAGCA,OAHD;AAAA,UAGUD,aAHV,eAGUA,aAHV;AAKP,aACE;AAAK,QAAA,SAAS,EAAEH,MAAM,CAACe,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAEU,MAAM,CAACX,EAAD,CAAtB;AAA4B,QAAA,KAAK,EAAE;AAAEY,UAAAA,YAAY,EAAE;AAAhB,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,EAAE,EAAED,MAAM,CAACX,EAAD,CADZ;AAEE,QAAA,OAAO,EAAEV,OAFX;AAGE,QAAA,QAAQ,EAAE,CAACiB,aAHb;AAIE,QAAA,QAAQ,EAAE,KAAKb,oBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAOE;AAAM,QAAA,KAAK,EAAE;AAAEmB,UAAAA,UAAU,EAAE;AAAd,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGvB,OAAO,GAAG,WAAH,GAAiB,aAD3B,CAPF,CADF,EAYE;AAAG,QAAA,SAAS,EAAEJ,MAAM,CAACiB,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAEjB,MAAM,CAAC4B,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEGL,QAFH,CAZF,EAgBE;AAAG,QAAA,SAAS,EAAEvB,MAAM,CAACiB,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAEjB,MAAM,CAAC4B,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEGJ,KAFH,CAhBF,EAoBGrB,aAAa,GACZ,oBAAC,aAAD;AACE,QAAA,IAAI,EAAEc,IADR;AAEE,QAAA,aAAa,EAAE,KAAKD,YAFtB;AAGE,QAAA,WAAW,EAAE,KAAKT,SAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADY,GAOZ,0CACE;AAAG,QAAA,SAAS,EAAEP,MAAM,CAACiB,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAEjB,MAAM,CAAC4B,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEGX,IAFH,CADF,EAKE;AAAK,QAAA,SAAS,EAAEjB,MAAM,CAAC6B,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE,CAACR,aAAnB;AAAkC,QAAA,OAAO,EAAE,KAAKhB,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CALF,CA3BJ,CADF;AA0CD;;;;EA/FgBZ,S;;AAkGnB,IAAMqC,eAAe,GAAG,SAAlBA,eAAkB,CAAC5B,KAAD;AAAA,SAAsB;AAC5CmB,IAAAA,aAAa,EAAEnB,KAAK,CAAC6B,IAAN,CAAWV;AADkB,GAAtB;AAAA,CAAxB;;AAIA,IAAMW,kBAAkB,GAAG;AAAElC,EAAAA,cAAc,EAAdA,cAAF;AAAkBC,EAAAA,gBAAgB,EAAhBA;AAAlB,CAA3B;AAEA,eAAeL,OAAO,CACpBoC,eADoB,EAEpBE,kBAFoB,CAAP,CAGb/B,IAHa,CAAf","sourcesContent":["// Core\nimport React, { Component, ChangeEvent } from 'react';\nimport { connect } from 'react-redux';\n// Components\nimport Checkbox from '../shared/Checkbox';\nimport EditableInput from '../shared/EditableInput';\nimport Button from '../shared/Button';\n// Instruments\nimport { AppState } from '../../redux/reducers';\nimport { ITask, ISystemState } from '../../redux/actions/types';\nimport { updateTaskText, updateTaskStatus } from '../../redux/actions/tasks';\nimport styles from './styles.module.css';\n\ninterface TaskProps {\n  task: ITask;\n  authenticated: ISystemState['authenticated'];\n  updateTaskText: ({\n    id,\n    text,\n    token\n  }: {\n    id: number,\n    text: { text: string },\n    token: string\n  }) => void;\n  updateTaskStatus: ({\n    id,\n    status,\n    token\n  }: {\n    id: number,\n    status: number,\n    token: string\n  }) => void;\n}\n\ninterface State {\n  isBeingEdited: boolean;\n  checked: boolean;\n}\n\nclass Task extends Component<TaskProps, State> {\n  state: State = { isBeingEdited: false, checked: false };\n\n  componentDidMount() {\n    if (this.props.task.status === 10) {\n      this.setState({\n        checked: true,\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps: TaskProps, nextState: State) {\n    const propsChanged =\n      nextProps.task.text !== this.props.task.text ||\n      nextProps.task.status !== this.props.task.status ||\n      nextProps.authenticated !== this.props.authenticated;\n\n    const stateChanged =\n      this.state.isBeingEdited !== nextState.isBeingEdited ||\n      this.state.checked !== nextState.checked;\n\n    return propsChanged || stateChanged;\n  }\n\n  onEditStart = () => this.setState({ isBeingEdited: true });\n\n  onEditEnd = () => this.setState({ isBeingEdited: false });\n\n  handleCheckboxChange = (e: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ checked: e.target.checked }, () => {\n      const status = this.state.checked ? 10 : 0;\n      const token = 'beejee';\n\n      this.props.updateTaskStatus({\n        id: this.props.task.id,\n        status,\n        token\n      });\n    });\n  };\n\n  handleUpdate = (text: { text: string }) => {\n    const token = 'beejee';\n\n    this.props.updateTaskText({ id: this.props.task.id, text, token });\n    this.onEditEnd();\n  };\n\n  render() {\n    const { authenticated } = this.props;\n    const { id, username, email, text } = this.props.task;\n    const { checked, isBeingEdited } = this.state;\n\n    return (\n      <div className={styles.task}>\n        <label htmlFor={String(id)} style={{ marginBottom: 8 }}>\n          <Checkbox\n            id={String(id)}\n            checked={checked}\n            disabled={!authenticated}\n            onChange={this.handleCheckboxChange}\n          />\n          <span style={{ marginLeft: 8 }}>\n            {checked ? 'Completed' : 'Uncompleted'}\n          </span>\n        </label>\n        <p className={styles.text}>\n          <span className={styles.title}>Username: </span>\n          {username}\n        </p>\n        <p className={styles.text}>\n          <span className={styles.title}>Email: </span>\n          {email}\n        </p>\n        {isBeingEdited ? (\n          <EditableInput\n            text={text}\n            onEditSuccess={this.handleUpdate}\n            onEditAbort={this.onEditEnd}\n          />\n        ) : (\n          <>\n            <p className={styles.text}>\n              <span className={styles.title}>Text: </span>\n              {text}\n            </p>\n            <div className={styles.actions}>\n              <Button disabled={!authenticated} onClick={this.onEditStart}>\n                Edit\n              </Button>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  authenticated: state.auth.authenticated,\n});\n\nconst mapDispatchToProps = { updateTaskText, updateTaskStatus };\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Task);\n"]},"metadata":{},"sourceType":"module"}